FROM rust:1.84-slim-bullseye as builder

# Install build dependencies
# Robust apt-get install with retries and recovery for network/package issues
RUN set -e; \
    for i in 1 2 3; do \
      apt-get update --fix-missing && apt-get install -y --fix-missing \
        pkg-config \
        libssl-dev \
        build-essential \
        git \
        llvm \
        libclang-dev \
        clang \
        curl \
        protobuf-compiler \
        libpq-dev \
        perl \
        libalgorithm-diff-xs-perl \
        libalgorithm-merge-perl \
        libfile-fcntllock-perl \
        libalgorithm-diff-perl && break || (echo "Retrying apt-get install... ($i)" && sleep 5); \
    done; \
    dpkg --configure -a; \
    apt-get install -f -y; \
    apt-get clean; \
    rm -rf /var/lib/apt/lists/*;

# Set working directory
WORKDIR /app

# Copy entire source code first
COPY . .

# Apply fixes to the codebase
COPY fix_all_issues.sh /app/fix_all_issues.sh
COPY fix_compilation_errors.sh /app/fix_compilation_errors.sh
RUN chmod +x /app/fix_all_issues.sh && bash /app/fix_all_issues.sh
RUN chmod +x /app/fix_compilation_errors.sh && bash /app/fix_compilation_errors.sh

# Switch to Ethereum mainnet configuration
COPY switch_to_ethereum.sh /app/switch_to_ethereum.sh
RUN chmod +x /app/switch_to_ethereum.sh && bash /app/switch_to_ethereum.sh

# Cache dependencies
RUN cargo fetch

# Build all required binaries in one command with increased jobs
# Updated to build with no default features and enable with-topology feature to avoid cyclic dependency
RUN cargo build --release --all --bins --jobs $(nproc) --no-default-features --features "with-blockchain with-block-history-actor"

# Second stage for runtime image
FROM rust:1.84-slim-bullseye

# Create non-root user
RUN groupadd -r loom && useradd -r -g loom loom

# Set working directory
WORKDIR /app

# Copy binaries from builder stage
COPY --from=builder /app/target/release/gasbench /app/
COPY --from=builder /app/target/release/exex-grpc-node /app/
COPY --from=builder /app/target/release/exex_grpc_loom /app/
COPY --from=builder /app/target/release/loom_anvil /app/
COPY --from=builder /app/target/release/loom_backrun /app/
COPY --from=builder /app/target/release/loom_base /app/
COPY --from=builder /app/target/release/loom_exex /app/
COPY --from=builder /app/target/release/nodebench /app/
COPY --from=builder /app/target/release/replayer /app/
# COPY --from=builder /app/target/release/loom /app/

# Copy configuration files from builder stage
COPY --from=builder /app/config_ethereum.toml /app/config_ethereum.toml
COPY --from=builder /app/config.toml /app/config.toml

# Create config.toml by copying from config_ethereum.toml if it doesn't exist
RUN if [ ! -f /app/config.toml ] && [ -f /app/config_ethereum.toml ]; then \
      cp /app/config_ethereum.toml /app/config.toml; \
      echo "Created config.toml from config_ethereum.toml"; \
      ls -la /app/config*; \
    elif [ ! -f /app/config.toml ]; then \
      echo "ERROR: No config file found"; \
      ls -la /app/; \
      exit 1; \
    fi

# Set ownership of the application directory
RUN chown -R loom:loom /app

# Copy startup script
COPY start_loom.sh /app/start_loom.sh
RUN chmod +x /app/start_loom.sh

# Switch to the non-root user
USER loom

# Set environment variable for info logging
ENV RUST_LOG=info

# Set the entrypoint
# Use exec form to run the startup script directly
ENTRYPOINT ["/app/start_loom.sh"]

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD ps aux | grep loom | grep -v grep || exit 1