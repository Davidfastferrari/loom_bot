use alloy_primitives::{Address, U256};
use loom_types_entities::strategy_config::StrategyConfig;
use serde::Deserialize;

#[derive(Clone, Deserialize, Debug)]
pub struct BackrunConfigSection {
    pub backrun_strategy: BackrunConfig,
}

#[derive(Clone, Deserialize, Debug)]
pub struct BaseNetworkConfig {
    pub min_profit_wei: Option<U256>,
    pub priority_fee: Option<U256>,
    pub max_gas_price: Option<U256>,
}

impl Default for BaseNetworkConfig {
    fn default() -> Self {
        Self {
            min_profit_wei: Some(U256::from(1_000_000_000_000_000u64)), // 0.001 ETH
            priority_fee: Some(U256::from(100_000_000u64)), // 0.1 Gwei
            max_gas_price: Some(U256::from(30_000_000_000u64)), // 30 Gwei
        }
    }
}

#[derive(Clone, Deserialize, Debug)]
pub struct BackrunConfig {
    eoa: Option<Address>,
    smart: bool,
    chain_id: Option<u64>,
    base_config: Option<BaseNetworkConfig>,
}

impl StrategyConfig for BackrunConfig {
    fn eoa(&self) -> Option<Address> {
        self.eoa
    }
}

impl BackrunConfig {
    pub fn smart(&self) -> bool {
        self.smart
    }

    pub fn new_dumb() -> Self {
        Self { 
            eoa: None, 
            smart: false,
            chain_id: None,
            base_config: None,
        }
    }
    
    pub fn is_base_network(&self) -> bool {
        self.chain_id.unwrap_or(1) == 8453
    }
    
    pub fn base_config(&self) -> BaseNetworkConfig {
        self.base_config.clone().unwrap_or_default()
    }
    
    pub fn min_profit_wei(&self) -> U256 {
        if self.is_base_network() {
            self.base_config().min_profit_wei.unwrap_or(U256::from(1_000_000_000_000_000u64))
        } else {
            U256::from(1_000_000_000_000_000u64) // Default 0.001 ETH
        }
    }
}

impl Default for BackrunConfig {
    fn default() -> Self {
        Self { 
            eoa: None, 
            smart: true,
            chain_id: None,
            base_config: None,
        }
    }
}use alloy_primitives::{Address, U256};
use loom_types_entities::strategy_config::StrategyConfig;
use serde::Deserialize;

#[derive(Clone, Deserialize, Debug)]
pub struct BackrunConfigSection {
    pub backrun_strategy: BackrunConfig,
}

#[derive(Clone, Deserialize, Debug)]
pub struct BaseNetworkConfig {
    pub min_profit_wei: Option<U256>,
    pub priority_fee: Option<U256>,
    pub max_gas_price: Option<U256>,
}

impl Default for BaseNetworkConfig {
    fn default() -> Self {
        Self {
            min_profit_wei: Some(U256::from(1_000_000_000_000_000u64)), // 0.001 ETH
            priority_fee: Some(U256::from(100_000_000u64)), // 0.1 Gwei
            max_gas_price: Some(U256::from(30_000_000_000u64)), // 30 Gwei
        }
    }
}

#[derive(Clone, Deserialize, Debug)]
pub struct BackrunConfig {
    eoa: Option<Address>,
    smart: bool,
    chain_id: Option<u64>,
    base_config: Option<BaseNetworkConfig>,
}

impl StrategyConfig for BackrunConfig {
    fn eoa(&self) -> Option<Address> {
        self.eoa
    }
}

impl BackrunConfig {
    pub fn smart(&self) -> bool {
        self.smart
    }

    pub fn new_dumb() -> Self {
        Self { 
            eoa: None, 
            smart: false,
            chain_id: None,
            base_config: None,
        }
    }
    
    pub fn is_base_network(&self) -> bool {
        self.chain_id.unwrap_or(1) == 8453
    }
    
    pub fn base_config(&self) -> BaseNetworkConfig {
        self.base_config.clone().unwrap_or_default()
    }
    
    pub fn min_profit_wei(&self) -> U256 {
        if self.is_base_network() {
            self.base_config().min_profit_wei.unwrap_or(U256::from(1_000_000_000_000_000u64))
        } else {
            U256::from(1_000_000_000_000_000u64) // Default 0.001 ETH
        }
    }
}

impl Default for BackrunConfig {
    fn default() -> Self {
        Self { 
            eoa: None, 
            smart: true,
            chain_id: None,
            base_config: None,
        }
    }
}